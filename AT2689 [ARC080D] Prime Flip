#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <queue>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 105; const int INF = 1e7;
	const int Max_d = 1e7 + 5;

	int n , a[Max_n] , lsh[Max_n << 1] , num[2];
	int head[Max_n << 1] , tot = 1 , cnt , flow;

	struct node
	{
		int nex , to , val;
		node(int a , int b , int c)
		{
			nex = a , to = b , val = c;
		}
		node(){}
	}edge[Max_n * Max_n];

	inline void add_edge(const int x , const int y)
	{
		edge[ ++ tot] = node(head[x] , y , 1) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x , 0) , head[y] = tot;
	}

	int prime[Max_d] , sum;

	bool vis[Max_d];

	inline void prework()
	{
		const int n = 1e7;
		for(int i = 2 ; i <= n ; ++ i)
		{
			if(!vis[i]) prime[ ++ sum] = i;
			for(int j = 1 ; j <= sum && prime[j] * i <= n ; ++ j)
			{
				vis[i * prime[j]] = true; if(i % prime[j] == 0) break;
			}
		}
	}

	int s , t , dis[Max_n << 1] , beg[Max_n << 1];

	queue<int> q;

	inline bool bfs()
	{
		memset(dis , 0x3f , sizeof(dis)); memset(beg , 0 , sizeof(beg));
		while(q.size()) q.pop(); 
		q.push(s); dis[s] = 0; beg[s] = head[s];
		// printf("%d\n" , dis[0] == 0x3f3f3f3f);
		while(q.size())
		{
			int now = q.front(); q.pop();
			for(int i = head[now] ; i ; i = edge[i].nex)
			{
				int nex = edge[i].to , va = edge[i].val;
				if(dis[nex] != 0x3f3f3f3f || va == 0) continue;
				beg[nex] = head[nex] , dis[nex] = dis[now] + 1; q.push(nex);
				if(nex == t) return true;
			}
		}
		return false;
	}

	int dinic(const int now , int flow)
	{
		if(now == t) return flow;
		int ret = 0;
		for(int i = beg[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to , va = edge[i].val; beg[now] = i;
			if(va == 0 || dis[nex] != dis[now] + 1) continue;
			int tmp = dinic(nex , min(flow , va));
			if(!tmp) dis[nex] = 0x3f3f3f3f;
			edge[i].val -= tmp , edge[i ^ 1].val += tmp , ret += tmp , flow -= tmp;
			if(!flow) break;
		}
		return ret;
	}

	inline void main()
	{
		n = read();
		for(int i = 1 ; i <= n ; ++ i) a[i] = read();
		sort(a + 1 , a + n + 1); int lst = a[1];
		for(int i = 2 ; i <= n ; ++ i)
		{
			if(a[i] == a[i - 1] + 1) continue;
			lsh[ ++ cnt] = lst , lsh[ ++ cnt] = a[i - 1] + 1 , lst = a[i];
		} 
		lsh[ ++ cnt] = lst , lsh[ ++ cnt] = a[n] + 1;
		prework(); vis[2] = vis[1] = vis[0] = true;
		for(int i = 1 ; i <= cnt ; ++ i)
			for(int j = 1 ; j <= cnt ; ++ j)
				if(lsh[i] & 1)
					if(!vis[abs(lsh[i] - lsh[j])])	add_edge(i , j);
		for(int i = 1 ; i <= cnt ; ++ i)
			if(lsh[i] & 1) add_edge(cnt + 1 , i) , ++ num[1];
			else add_edge(i , cnt + 2) , ++ num[0];
		s = cnt + 1 , t = cnt + 2;
		while(bfs())	flow += dinic(s , INF);
		num[0] -= flow , num[1] -= flow;
		printf("%d\n" , flow + (num[0] / 2 + num[1] / 2) * 2 + (num[1] & 1) * 3);
	}
}

int main()
{
	thecold::main();
	return 0;
}
