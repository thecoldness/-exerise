#include <cstdio>
#include <cstring>
#include <algorithm>
#include <cctype>
#include <queue>
using namespace std;

namespace thecold
{
	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}
	
	const int Max_n = 1e6 + 5;
	const int INF = 1e8;
	
	struct node
	{
		int nex , to , val;
		node(int a , int b , int c)
		{
			nex = a , to = b , val = c;
		}
		node(){}
	}edge[Max_n << 3];
	
	int tot , n , p[Max_n] , q[Max_n] , head[Max_n << 1];
	int belq[Max_n] , belp[Max_n] , ppos[Max_n];
	int qpos[Max_n];
	
	inline void add_edge(const int x , const int y , const int z)
	{
		edge[ ++ tot] = node(head[x] , y , z) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x , 0) , head[y] = tot;
	}
	
	inline void add_edge_s(const int x , const int y , const int z)
	{
		edge[ ++ tot] = node(head[x] , y , z) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x , z) , head[y] = tot;
	}
	
	bool vis[Max_n];
	
	queue<int> zzz;
	
	int dis[Max_n << 1] , beg[Max_n << 1] , s , t;
	
	inline bool bfs()
	{
		while(zzz.size()) zzz.pop();
		memset(dis , 0x3f , sizeof(dis));
		dis[s] = 0 , beg[s] = head[s]; zzz.push(s);
		while(!zzz.empty())
		{
			int now = zzz.front(); zzz.pop();
			for(int i = head[now] ; i ; i = edge[i].nex)
			{
				int nex = edge[i].to;
				if(dis[nex] != 0x3f3f3f3f || !edge[i].val) continue;
				dis[nex] = dis[now] + 1 , beg[nex] = head[nex];
				if(nex == t)	return true;
//				zzz.push(t); bug
				zzz.push(nex);
			}
		}
		return false;
	}
	
	inline int dinic(const int now , int flow)
	{
		if(now == t)	return flow;
		int ret = 0;
		for(int i = beg[now] ; i ; i = edge[i].nex)
		{
			beg[now] = i; int nex = edge[i].to , va = edge[i].val;
			if(!va || dis[nex] != dis[now] + 1)	continue;
			int tmp = dinic(nex , min(flow , va));
			if(!tmp) dis[nex] = 0x3f3f3f3f;
			flow -= tmp , ret += tmp , edge[i].val -= tmp , edge[i ^ 1].val += tmp;
			if(!flow)	break;
		}
		return ret;
	}
	
	inline void main()
	{
		n = read();
		for(int i = 0 ; i < n ; ++ i)
			p[i] = read() , ppos[p[i]] = i;
		for(int i = 0 ; i < n ; ++ i)
			q[i] = read() , qpos[q[i]] = i;
		for(int i = 0 ; i < n ; ++ i)
		{
			if(vis[i]) continue;
			int now = i;vis[i] = true , belp[i] = ++ tot;
			while(now != p[i])
				vis[ppos[now]] = true , now = ppos[now] , belp[now] = tot;
		}
		memset(vis , false , sizeof(vis)) , tot = 0;
		for(int i = 0 ; i < n ; ++ i)
		{
			if(vis[i]) continue;
			int now = i; vis[i] = true , belq[i] = ++ tot;
			while(now != q[i])
				vis[qpos[now]] = true , now = qpos[now] , belq[now] = tot;
		}
		tot = 1 , s = 0 , t = 2 * n + 1;
		for(int i = 0 ; i < n ; ++ i)
		{
			add_edge(0 , belp[i] , 2) , add_edge(0 , n + belq[i] , 2 * (q[i] == i) + 2);
			add_edge(belq[i] + n , t , 1 - (p[i] == q[i]) + (q[i] == i) + (p[i] == i) + 2);
			add_edge(belp[i] , t , (p[i] == q[i]) - 1 - (q[i] == i) + (p[i] == i) + 2);
			add_edge_s(belp[i] , belq[i] + n , 1 + (p[i] == q[i]) - (q[i] == i) - (p[i] == i));
		}
		int ans = 0;
		while(bfs())
			ans += dinic(s , INF);
//		ans -= 2 * n , ans /= 2; bug
		ans -= 4 * n , ans /= 2;
		printf("%d\n" , n - ans);
	}	
	
}

int main()
{
	thecold::main();
	return 0;
}
